/*
 *  Copyright 2017 Datamountaineer.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.maiflai:gradle-scalatest:0.29'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0'
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'

allprojects {
    group = 'com.datamountaineer'
    version = version
    description = "kafka-connect-transformers"
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.github.maiflai.scalatest'
    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    ext {
        scalaMajorVersion = '2.13'
        scala = '2.13.3'
        scalaCheck = '1.14.1'
        scalaTest = '3.2.2'
        junit = '4.11'
        confluentVersion = '6.0.0'
        scalaLoggingVersion = '3.9.2'
        kafkaVersion = '2.6.0'
        mockitoVersion = '1.10.19'
        jacksonxmlVersion = '2.6.5'
        slf4jVersion = "1.7.7"
        json4sVersion = "3.4.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://mvnrepository.com/artifact" }
    }

    configurations {
        provided
        compile.extendsFrom provided
    }

    dependencies {
        provided "org.scala-lang:scala-library:$scala"
        provided "org.scala-lang:scala-compiler:$scala"
        provided "com.typesafe.scala-logging:scala-logging_$scalaMajorVersion:$scalaLoggingVersion"
        // provided "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"
        provided "org.apache.kafka:connect-json:$kafkaVersion"
        provided "org.apache.kafka:connect-transforms:$kafkaVersion"
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
        testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
        testCompile "junit:junit:$junit"
        testCompile "org.apache.curator:curator-test:3.1.0"
        testCompile 'org.powermock:powermock-module-junit4:1.6.5'
        testRuntime 'org.pegdown:pegdown:1.1.0'
        testRuntimeOnly "com.vladsch.flexmark:flexmark-all:0.36.8"
    }

    jar {
        dependsOn configurations.runtime
        from {
            (configurations.runtime - configurations.provided).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
        jar.archiveName = "$project.name-$project.version-$confluentVersion-all.jar"
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
        systemProperty 'keystore', projectDir.canonicalPath + "/src/test/resources/stc_keystore.jks"
        systemProperty 'truststore', projectDir.canonicalPath + "/src/test/resources/stc_truststore.jks"
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    artifacts {
        archives javadocJar, scaladocJar, sourcesJar
    }

    task compile(dependsOn: 'compileScala')
    javadoc.dependsOn scaladoc

    signing {
        sign configurations.archives
    }

    // OSSRH publication
    if (project.hasProperty('release')) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/landoop/kafka-connect-transformers'

                        scm {
                            connection 'scm:git:https://github.com/landoop/kafka-connect-transformers.git'
                            developerConnection 'scm:git:git@github.com:landoop/kafka-connect-transformers.git'
                            url 'https://github.com/landoop/kafka-connect-transformers.git'
                        }

                        licenses {
                            license {
                                name 'Apache License 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'andrewstevenson'
                                name = 'Andrew Stevenson'
                                email = 'andrew@landoop.com'
                            }
                            developer {
                                id = 'stheppi'
                                name = 'Stefan Bocutiu'
                                email = 'stefan@landoop.com'
                            }
                            developer {
                                id = 'Antwnis'
                                name = 'Antonios Chalkiopoulos'
                                email = 'antonios@landoop.com'
                            }
                        }
                    }
                }
            }
        }

        nexusStaging {
            packageGroup = project.getGroup()
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

